# This sample sets up a an Elasticsearch cluster along with a Kibana instance
# and an APM server, configured to be able to communicate with each other
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: elasticsearch-$ECK_DEPLOYMENT_NAME
spec:
  version: $ELASTIC
  http:
    service:
      spec:
        type: NodePort
  nodeSets:
  - name: default
    config:
      node.store.allow_mmap: false
    count: 1
    podTemplate:
      spec:
        containers:
          - name: elasticsearch
            securityContext:
              privileged: true
            resources:
              limits:
                memory: 2Gi  
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: kibana-$ECK_DEPLOYMENT_NAME
spec:
  version: $ELASTIC
  http:
    service:
      spec:
        type: NodePort
  count: 1
  elasticsearchRef:
    name: "elasticsearch-$ECK_DEPLOYMENT_NAME"
  config:
    xpack.fleet.agents.elasticsearch.hosts: ["https://elasticsearch-$ECK_DEPLOYMENT_NAME-es-http:9200"]
    xpack.fleet.agents.fleet_server.hosts: ["https://fleet-server-$ECK_DEPLOYMENT_NAME-agent-http:8220"]
    xpack.fleet.packages:
      - name: system
        version: latest
      - name: elastic_agent
        version: latest
      - name: fleet_server
        version: latest
      - name: apm
        version: latest
    xpack.fleet.agentPolicies:
      - name: Fleet Server on ECK policy
        id: eck-fleet-server
        is_default_fleet_server: true
        namespace: fleet
        monitoring_enabled:
          - logs
          - metrics
        package_policies:
        - name: fleet_server-1
          id: fleet_server-1
          package:
            name: fleet_server
      - name: Elastic Agent on ECK policy
        id: eck-agent
        namespace: development
        monitoring_enabled:
          - logs
          - metrics
        unenroll_timeout: 900
        is_default: true
        package_policies:
          - name: system-1
            id: system-1
            package:
              name: system  
          - name: apm-1
            package:
              name: apm
            inputs:
            - type: apm
              enabled: true
              vars:
              - name: host
                value: 0.0.0.0:8200    
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: fleet-server-$ECK_DEPLOYMENT_NAME
spec:
  version: $ELASTIC
  kibanaRef:
    name: kibana-$ECK_DEPLOYMENT_NAME
  elasticsearchRefs:
  - name: elasticsearch-$ECK_DEPLOYMENT_NAME
  mode: fleet
  fleetServerEnabled: true
  deployment:
    replicas: 1
    podTemplate:
      spec:
        serviceAccountName: fleet-server
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata: 
  name: elastic-agent-$ECK_DEPLOYMENT_NAME
spec:
  version: $ELASTIC
  kibanaRef:
    name: kibana-$ECK_DEPLOYMENT_NAME
  fleetServerRef: 
    name: fleet-server-$ECK_DEPLOYMENT_NAME
  mode: fleet
  deployment:
    replicas: 1
    podTemplate:
      spec:
        serviceAccountName: fleet-server
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
---
apiVersion: v1
kind: Service
metadata:
  name: apm-$ECK_DEPLOYMENT_NAME
spec:
  selector:
    common.k8s.elastic.co/type: elastic-agent
    common.k8s.elastic.co/type: agent
  ports:
  - protocol: TCP
    port: 8200
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fleet-server
rules:
- apiGroups: [""]
  resources:
  - pods
  - namespaces
  - nodes
  verbs:
  - get
  - watch
  - list
- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs:
  - get
  - create
  - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fleet-server
  namespace: $ECK_NAMESPACE
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fleet-server
subjects:
- kind: ServiceAccount
  name: fleet-server
  namespace: $ECK_NAMESPACE
roleRef:
  kind: ClusterRole
  name: fleet-server
  apiGroup: rbac.authorization.k8s.io
